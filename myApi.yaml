openapi: 3.0.3
info:
  title: User Management & Authentication API
  version: 1.0.0
  description: API for user management and authentication

servers:
  - url: http://localhost:8080/{apiPrefix}
    variables:
      apiPrefix:
        default: api/v1

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: Authenticate user and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                message: "Login successful"
                data:
                  id: 123
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                message: "Authentication failed"
                data: "Invalid Email or Password."

  /users/user:
    get:
      tags: [Users]
      summary: Get current user details
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    put:
      tags: [Users]
      summary: Update user details
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: query
          schema:
            type: integer
          description: Optional user ID (defaults to current user)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    delete:
      tags: [Users]
      summary: Delete user account
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: query
          schema:
            type: integer
          description: Optional user ID (defaults to current user)
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /users/add:
    post:
      tags: [Users]
      summary: Create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '409':
          description: Conflict (user already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

components:
  schemas:
    # Requests
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
      required: [email, password]

    CreateUserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
      required: [firstName, lastName, email, password]

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string

    # Responses
    ApiResponse:
      type: object
      properties:
        message:
          type: string
        data:
          oneOf:
            - $ref: '#/components/schemas/JwtResponse'
            - $ref: '#/components/schemas/UserDto'
            - type: "null"

    JwtResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        token:
          type: string

    UserDto:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
